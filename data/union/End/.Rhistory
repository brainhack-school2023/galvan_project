library(splines) # para utilizar con lm()
# vector of values
# tag[,c("zscore")]
# La Función sign() encuentra el signo de los elementos del vector numérico
# La función diff() en R se utiliza para obtener la diferencia entre cada elemento de un vector de forma consecutiva
#
# La funcion which() devuelve la posición o indice de la condicion satisfecha.
h<-dbd$zscore
# local maxima I obtain local maxima by utilizing the diff function.
lmax <- h[c(1, which(diff(sign(diff(h)))==-2)+1, length(h))]
# spline calculation
spl <- spline(1:length(lmax), lmax)
# visual inspection
plot(spl)
lines(spl)
#spl es x
h<-dbd$zscore
plot(h)
## utilizo el valor AIC de logistic regression de A en X para los degree
max(dbd$zscore)
min(dbd$zscore)
modelo2<-lm(spl$y~bs(spl$x,degree = 30.56, knots = lmax ))
modelo3<-lm(spl$y~bs(spl$x,degree = 30.56 ))
modelo4<-lm(h~bs(h,degree = 30.56 ))
modelo5<-lm(h~bs(dbd$A,degree = 30.56 ))
modelo6<-lm(h~bs(dbd$subclass,degree = 30.56 ))
modelo7<-lm(c(0:1)~bs(dbd$h,degree = 30.56 ))
modelo7<-lm(dbd$h~bs(id,degree = 30.56 ))
modelo7<-lm(h~bs(id,degree = 30.56 ))
which(h)
length(h)
spl$y
spl$x
(1:length(h))
modelo7<-lm(h~bs((1:length(h)),degree = 30.56 ))
summary(modelo7)
modelo7<-lm(h~bs((1:length(h))))
summary(modelo7)
plot(h,(1:length(h),pch=16)
plot(h,(1:length(h)),pch=16)
plot((1:length(h)),h,pch=16)
plot(h,h,pch=16)
plot((1:length(h)),h,pch=16)
plot(h,pch=16)
h.index
h$index
plot((1:length(h)),h,pch=16)
summary(modelo7)
modelo7<-lm(h~bs((1:length(h)),degree = 30.56, knots = lmax))
summary(modelo7)
modelo7<-lm(h~bs((1:length(h)),degree = 30.56))
summary(modelo7)
modelo2<-lm(spl$y~bs(spl$x,degree = 30.56, knots = lmax ))
summary(modelo2)
modelo6<-lm(h~bs(dbd$subclass,degree = 30.56 ))
modelo5<-lm(h~bs(dbd$A,degree = 30.56 ))
summary(modelo5)
pre5<-predict(modelo5)
plot(dbd$A,h,pch=16)
lines(dbd$A,pre5,lwd=2,col="red")
modelo3<-lm(spl$y~bs(spl$x,degree = 30.56 ))
summary(modelo3)
pre3<-predict(modelo3)
plot(spl$x,spl$y,pch=16)
lines(spl$x,pre2,lwd=2,col="red")
lines(spl$x,pre3,lwd=2,col="blue")
predict(modelo3, dbd$zcore)
modelo6<-lm(h~bs(dbd$subclass,degree = 30.56 ))
#generate statrum to quantile of zcore values continuos
dbd$subclass <- cut(x=dbd$zscore,
breaks=quantile(dbd$zscore,
prob = seq(0, 1, 1/5)),include.lowest=T)
levels(dbd$subclass) <- 1:length(levels(dbd$subclass))
modelo6<-lm(h~bs(dbd$subclass,degree = 30.56 ))
summary(modelo6)
plot(h,h,pch=16)
line(h,predict(modelo6, dbd$zcores),pch=16)
plot(h,h,pch=16)
line(h,predict(modelo6, dbd$zcores))
plot((1:length(h)),h,pch=16)
line((1:length(h)),predict(modelo6, dbd$zcores))
plot((1:length(h)),h,pch=16)
line((1:length(h)),predict(modelo6))
plot((1:length(h)),h,pch=16)
line((1:length(h)),predict(modelo6),lwd=2,col="red")
plot((1:length(h)),h,pch=16)
line((1:length(h)),predict(modelo6),lwd=2,col="red")
plot((1:length(h)),h,pch=16)
lines((1:length(h)),predict(modelo6),lwd=2,col="red")
modelo6<-lm(h~bs(dbd$subclass ))
plot((1:length(h)),h,pch=16)
lines((1:length(h)),predict(modelo6),lwd=2,col="red")
summary(modelo6)
plot((1:length(h)),h,pch=16)
lines((1:length(h)),predict(modelo6, sdb$zcores),lwd=2,col="red")
plot((1:length(h)),h,pch=16)
lines((1:length(h)),predict(modelo6, dbd$zcores),lwd=2,col="red")
dbd$zcore[1]
dbd$zcore[,c(1)]
dbd$zcore
dbd$zscore[1]
predict(modelo3, dbd$zcore[1])
predict(modelo3, dbd$zcore[1],type="response")
model2.matrix
spline <- glm(spl$y~nss(spl$x,degree = 30.56, knots = lmax ))
spline <- glm(spl$y~ns(spl$x,degree = 30.56, knots = lmax ))
spline <- glm(spl$y~ns(spl$x, knots = lmax ))
spline
data = data.frame(dbd$zcore[1])
predict(modelo3, data,type="response")
predict(spline, data, type="response")
data
dbd$zcore[1]
dbd$zscore[1]
predict(spline, dbd$zscore[1], type="response")
data = data.frame(dbd$zscore[1])
predict(spline, data, type="response")
coefficients(modelo3)
model.matrix(~bs(spl$x,degree = 30.56))
m=model.matrix(~bs(spl$x,degree = 30.56))
m
prd=exp(coefficients(modelo3) %*% t(m))
prd[10]
# prd=exp(coefficients(modelo3) %*% t(m)) como el mío no es logaritmo
prd=(coefficients(modelo3) %*% t(m))
prd[10]
dbd$zscore[10]
dbd$zscore[15]
prd[15]
prd[18]
dbd$zscore[18]
###Linear spline
i_fit = ols(as.formula(glue::glue("linear_spline ~ lsp(zscore)")), data = dbd)
library(pacman)
install.packages("pacman")
library(pacman)
###Linear spline
i_fit = ols(as.formula(glue::glue("linear_spline ~ lsp(zscore)")), data = dbd)
p_load(kirkegaard, rms)
###Linear spline
i_fit = ols(as.formula(glue::glue("linear_spline ~ lsp(zscore)")), data = dbd)
###Linear spline
i_fit = ols(as.formula(glue::glue("linear_spline ~ lsp(dbd$zscore)")), data = d)
d = tibble(
x = 1:100,
#even spline
k2_even = discretize(x, breaks = 3, labels = "number"),
#default split used in rms - 10, 50, 90th centiles
k2_default = c(rep(1, 10), rep(2, 80), rep(3, 10)),
#generate linear spline values
linear_spline = case_when(k2_even == 1 ~ x*1,
k2_even == 2 ~ x*0 + 34,
k2_even == 3 ~ x*2 - 100),
#natural spline values -- actually a polynomial
natural_spline = 1*x + 5*x^2 - .1*x^3
)
install.packages("arules")
library(arules)
d = tibble(
x = 1:100,
#even spline
k2_even = discretize(x, breaks = 3, labels = "number"),
#default split used in rms - 10, 50, 90th centiles
k2_default = c(rep(1, 10), rep(2, 80), rep(3, 10)),
#generate linear spline values
linear_spline = case_when(k2_even == 1 ~ x*1,
k2_even == 2 ~ x*0 + 34,
k2_even == 3 ~ x*2 - 100),
#natural spline values -- actually a polynomial
natural_spline = 1*x + 5*x^2 - .1*x^3
)
library(arules)
d = tibble(
x = 1:100,
#even spline
k2_even = discretize(x, breaks = 3, labels = "number"),
#default split used in rms - 10, 50, 90th centiles
k2_default = c(rep(1, 10), rep(2, 80), rep(3, 10)),
#generate linear spline values
linear_spline = case_when(k2_even == 1 ~ x*1,
k2_even == 2 ~ x*0 + 34,
k2_even == 3 ~ x*2 - 100),
#natural spline values -- actually a polynomial
natural_spline = 1*x + 5*x^2 - .1*x^3
)
write.csv(dbd, "C:\\hcgalvan\\Repositorios\\hcgalvan_project\\data\\union\\End\\zscore.csv", row.names=FALSE)
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("zscore.csv"))
dz<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data)
dz
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("zscore.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data)
dz
form = "D ~ A + ns(zscore,df=4)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
dz
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("zscore.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data[,c("A","label","zscore")])
form = "D ~ A + ns(zscore,df=4)"
form = formula(form)
modelSpline = glm(form, data=SA_heart_data, family=binomial )
form = "D ~ A + ns(zscore,df=4)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
form = "dz$D ~ dz$A + ns(dz$zscore,df=4)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
form = "dz$label ~ dz$A + ns(dz$zscore,df=4)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
form = "dz$label ~ dz$A + ns(dz$zscore,df=30.56)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
form = "dz$label ~ dz$A + ns(dz$zscore,df=6)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
form = "dz$label ~ dz$A + ns(dz$zscore,df=12)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
form = "dz$label ~ dz$A + ns(dz$zscore,df=3)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
print( summary(splineModel), digits=3 )
print( summary(backstep), digits=3 )
drop1(backstep, scope=format, test="Chisq" )
drop1(backstep, scope=form, test="Chisq" )
drop1(step(modelSpline), test="Chisq")
#form = "dz$label ~ dz$A + ns(dz$zscore,df=3)"
form = "dz$label ~ dz$A + bs(dz$zscore, degree = 30.56)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
print( summary(backstep), digits=3 )
#form = "dz$label ~ dz$A + ns(dz$zscore,df=3)"
form = "dz$label ~ dz$A + bs(dz$zscore, df= 3)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
print( summary(backstep), digits=3 )
summary(backstep)
form = "dz$label ~ dz$A + ns(dz$zscore,df=3)"
#form = "dz$label ~ dz$A + bs(dz$zscore, df= 3)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
print( summary(backstep), digits=3 )
drop1(step(modelSpline), test="Chisq")
form = "dz$label ~ ns(dz$A,df=1) + ns(dz$zscore,df=3)"
#form = "dz$label ~ dz$A + bs(dz$zscore, df= 3)"
form = formula(form)
modelSpline = glm(form, data=dz, family=binomial )
backstep = step(modelSpline) # Backwards selection is the default
summary(backstep)
print( summary(backstep), digits=3 )
modelSpline
summary(modelSpline)
form = "dz$label ~ dz$A + dz$zscore"
form = formula(form)
model = glm(form, data=dz, family=binomial )
summary(model)
dz1<-data.frame(data)
plot(dz1)
plot(dz1$zscore)
sp <- spline(dz1$zscore)
summary(sp)
sp
lmax <- h[c(1, which(diff(sign(diff(dz1$zscore)))==-2)+1, length(hdz1$zscore))]
lmax <- h[c(1, which(diff(sign(diff(dz1$zscore)))==-2)+1, length(dz1$zscore))]
length(lmax)
length(dz1$zscore)
length(lmax)
spl <- spline(1:length(lmax), lmax)
spl
length(spl)
length(spl$y)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline(x, y))
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline(x, dz1$zscore))
plot(dz1$zscore)
lmax <- h[c(1, which(diff(sign(diff(dz1$zscore)))==-2)+1, length(dz1$zscore))]
spl <- spline(1:length(lmax), lmax)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 201), col = 2)
length(spl$y)
length(lmax)
length(dz1$zscore)
sp <- spline(dz1$zscore)
sp
summary(sp)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 30), col = 2)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 30),lwd=2, col = 2)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 4),lwd=2, col = 2)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 30.5),lwd=2, col = 2)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 30.5),lwd=2, col = 2)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 30),lwd=2, col = 2)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (D ~ bs(zscore, knots = knots), data = data_B, family=binomial)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (D ~ bs(zscore, knots = knots), data = dz1, family=binomial)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$D ~ bs(dz1$zscore, knots = knots), data = dz1, family=binomial)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ bs(dz1$zscore, knots = knots), data = dz1, family=binomial)
# Make predictions
pred.val.2 <- predict(model, type ="response")
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, data_B$disease),
R2 = R2(pred.val.2, data_B$disease)
)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ bs(dz1$zscore, knots = knots), data = dz1, family=binomial)
# Make predictions
pred.val.2 <- predict(model, type ="response")
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ A+bs(dz1$zscore, knots = knots), data = dz1, family=binomial)
# Make predictions
pred.val.2 <- predict(model, type ="response")
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
summary(pred.val.2)
summary(model)
knots
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ A+bs(dz1$zscore, degree=30, knots = knots), data = dz1, family=binomial)
summary(model)
# Make predictions
pred.val.2 <- predict(model, type ="response")
summary(pred.val.2)
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
summary(pred.val.2)
summary(model)
plot(dz1$zscore)
lmax <- h[c(1, which(diff(sign(diff(dz1$zscore)))==-2)+1, length(dz1$zscore))]
spl <- spline(1:length(lmax), lmax)
plot((1:length(dz1$zscore)), dz1$zscore, main = paste("spline[fun](.) through", 9, "points"))
lines(spline((1:length(dz1$zscore)), dz1$zscore))
lines(spline((1:length(dz1$zscore)), dz1$zscore, n = 30),lwd=2, col = 2)
backstep = step(model) # Backwards selection is the default
summary(backstep)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ A+bs(dz1$zscore, degree=20, knots = knots), data = dz1, family=binomial)
summary(model)
# Make predictions
pred.val.2 <- predict(model, type ="response")
summary(pred.val.2)
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ A+bs(dz1$zscore, degree=20, knots = knots), data = dz1, family=binomial)
summary(model)
# Make predictions
pred.val.2 <- predict(model, type ="response")
summary(pred.val.2)
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
backstep = step(model) # Backwards selection is the default
summary(backstep)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ A+bs(dz1$zscore, degree=10, knots = knots), data = dz1, family=binomial)
summary(model)
# Make predictions
pred.val.2 <- predict(model, type ="response")
summary(pred.val.2)
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
backstep = step(model) # Backwards selection is the default
summary(backstep)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ A+bs(dz1$zscore, degree=30, knots = knots), data = dz1, family=binomial)
summary(model)
# Make predictions
pred.val.2 <- predict(model, type ="response")
summary(pred.val.2)
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
backstep = step(model) # Backwards selection is the default
summary(backstep)
# Diagnóstico del modelo
dz1$probabilidades.predichas <- fitted(model)
dz1$studentized.residuals <- rstudent(model)
dz1$dfbeta <- dfbeta(logmodel)
knots <- quantile(dz1$zscore, p = c(0.25, 0.5, 0.75))
# Build the model
library(splines)
model <- glm (dz1$label ~ A+bs(dz1$zscore, degree=30, knots = knots), data = dz1, family=binomial)
summary(model)
# Make predictions
pred.val.2 <- predict(model, type ="response")
summary(pred.val.2)
# Model performance
library(caret)
data.frame(
RMSE = RMSE(pred.val.2, dz1$label),
R2 = R2(pred.val.2, dz1$label)
)
# Diagnóstico del modelo
dz1$probabilidades.predichas <- fitted(model)
dz1$studentized.residuals <- rstudent(model)
dz1$dfbeta <- dfbeta(model)
dz1$dffit <- dffits(model)
dz1$leverage <- hatvalues(model)
head(dz1[, c("age", "sl2l_iso","probabilidades.predichas")])
# Diagnóstico del modelo
dz1$probabilidades.predichas <- fitted(model)
dz1$studentized.residuals <- rstudent(model)
dz1$dfbeta <- dfbeta(model)
dz1$dffit <- dffits(model)
dz1$leverage <- hatvalues(model)
head(dz1[, c("label", "A","probabilidades.predichas")])
head(dz1[, c("leverage", "studentized.residuals", "dfbeta")])
head(dz1[, c("label", "A","probabilidades.predichas")])
head(dz1[, c("leverage", "studentized.residuals", "dfbeta")])
head(dz1[, c("leverage", "studentized.residuals", "dfbeta")])
dz1$probabilidades.predichas <- fitted(model)
dz1$studentized.residuals <- rstudent(model)
dz1$dfbeta <- dfbeta(model)
dz1$dffit <- dffits(model)
dz1$leverage <- hatvalues(model)
head(dz1[, c("label", "A","probabilidades.predichas")])
head(dz1[, c("leverage", "studentized.residuals", "dfbeta")])
dz1[, c("leverage", "studentized.residuals", "dfbeta")]
View(dz1)
step(modelog, direction = "backward")
