plot((1:length(t3$zscore)), t3$zscore, main = paste("spline[fun](.) through", 9, "points")) #Expuestas
plot((1:length(t3$zscore)), t3$zscore, main = paste("spline[fun](.) through", 9, "points")) #Expuestas
points(t3$zscore)
lines(spl)
plot(spl)
plot((1:length(t3$zscore)), t3$zscore, main = paste("spline[fun](.) through", 9, "points")) #Expuestas
points(t3$zscore)
require(mgcv)
plotdist(t3$zscore, histo=TRUE, demp=TRUE) #completamente ajustado
plotdist(t2$zscore, histo=TRUE, demp=TRUE) #completamente ajustado
place.knots(t2$zscore,5)
plot((1:length(t3$zscore)), t3$zscore, main = paste("spline[fun](.) through", 9, "points")) #Expuestas
points(t3$zscore)
lines(spl)
# La funcion which() devuelve la posición o indice de la condicion satisfecha.
h<-t3$zscore
# local maxima I obtain local maxima by utilizing the diff function.
diff(sign(diff(h)))==-2
which(diff(sign(diff(h)))==-2)+1
h[c(1, which(diff(sign(diff(h)))==-2)+1, length(h))]
lmax <- h[c(1, which(diff(sign(diff(h)))==-2)+1, length(h))]
length(lmax)
# spline calculation
spl <- spline(1:length(lmax), lmax)
length(spl$x)
spl$y
plot(spl)
lines(spl)
#lines(t3$zscore)
points(t3$zscore)
plot((1:length(t3$zscore)), t3$zscore, main = paste("spline[fun](.) through", 9, "points")) #Expuestas
lines(spl)
plot((1:length(t3$zscore)), t3$zscore, main = paste("spline[fun](.) through", 9, "points")) #Expuestas
lines(spl)
lines(t3$zscore)
Fn <- ecdf(t3$zscore)
plot(fn)
Fn <- ecdf(t3$zscore)
plot(Fn)
Fn
tt <- seq(-2, 2, by = 0.1)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
Fn  ## devuelve percentil
tt <- seq(0, 1, by = 0.1)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
tt <- seq(0, 1, by = 0.5)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
tt <- seq(0, 1, by = 0.1)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
tt <- seq(0, 2, by = 0.1)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
tt <- seq(0, .4, by = 0.1)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
tt <- seq(0, .9, by = 0.1)
12 * Fn(tt) # Fn is a 'simple' function {with values k/12}
tt <- seq(0, .9, by = 0.1)
15 * Fn(tt) # Fn is a 'simple' function {with values k/12}
knots(Fn)
knots(t3$zscore)
knots(t3$zscore)
knots(t3$zscore)
t3$zscore
knots(t3$zscore)
knots(Fn)
View(t2)
View(t3)
write.csv(t2, "C:\\hcgalvan\\Repositorios\\hcgalvan_project\\data\\union\\End\\dbcasespieceswice.csv", row.names=FALSE) ##guardo los casos
write.csv(t3, "C:\\hcgalvan\\Repositorios\\hcgalvan_project\\data\\union\\End\\dbcontrolpieceswice.csv", row.names=FALSE) ##guardo los sujetos de control
{r}
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("dbcasespieceswice.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
pcwstd<-data.frame(data)
pcwstd
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("dbcasespieceswice.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data[,c("A","label","zscore")])
temp = gsub(".*target.*", "", readLines("dbcasespieceswice.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data[,c("A","label","zscore")])
View(data)
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("zscore.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data[,c("D","A","zscore")])
dz<-data.frame(data[,c("D","A","zscore")])
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("zscore.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data[,c("D","A","zscore")])
data[,c("D","A","zscore")]
data
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
dz<-data.frame(data[,c("D","A","zscore")])
setwd("C:/hcgalvan/Repositorios/hcgalvan_project/data/union/End")
temp = gsub(".*target.*", "", readLines("dbcasespieceswice.csv"))
data<-read.table(text=temp, sep=",", header=TRUE)
dz<-data.frame(data[,c("D","A","zscore")])
pcwstd<-data.frame(dz)
```{r}
pcwstd
knots=1:7/8
knots
bsx <- data.frame(bSpline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
bsx <- data.frame(Spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
library(MASS)
bsx <- data.frame(Spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
library(MASS)
bsx <- data.frame(Spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
library(fitdistrplus)
bsx <- data.frame(Spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
library(spline)
library(spline2)
library(splines)
bsx <- data.frame(Spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
library(tibble)
bsx <- data.frame(Spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
bsx <- data.frame(spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
seq(from=0, to=28, by=0.01)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
library(dplyr)
library(ggplot2)
library(gridExtra)
library(MASS)
library(fitdistrplus)
library(ggstatsplot)
library(tibble)
library(readr)
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
install.packages("PolynomF")
library(dplyr)
library(ggplot2)
library(PolynomF)
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
library(PolynomF)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
poly.calc(dias, muestra1)
poly.from.values(dias, muestra1)
install.packages("polynom")
library(Polynom)
library(dplyr)
library(ggplot2)
library(Polynom)
library(polynom)
poly.from.values(dias, muestra1)
poly.calc(dias, muestra1)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
muestra_seq <- pol_muestra1(dias_seq)
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=dias_seq, y=muestra_seq), color="green", size=1)+
geom_point(aes(x=dias, y=muestra1), color="dodgerblue3", size=3)+
#Muestra 2
geom_line(aes(x=dias_seq, y=muestra_seq2), color="red", size=1)+
geom_point(aes(x=dias, y=muestra2), color="orange", size=3)+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
muestra_seq <- pol_muestra1(dias_seq)
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=dias_seq, y=muestra_seq), color="green", linewidth=1)+
geom_point(aes(x=dias, y=muestra1), color="dodgerblue3", linewidth=3)+
#Muestra 2
geom_line(aes(x=dias_seq, y=muestra_seq2), color="red", linewidth=1)+
geom_point(aes(x=dias, y=muestra2), color="orange", linewidth=3)+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
library(ggplot2)
ggplotly(graf_2)
install.packages("plotly")
install.packages("plotly")
library(plotly)
ggplotly(graf_2)
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
muestra_seq <- pol_muestra1(dias_seq)
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=dias_seq, y=muestra_seq), color="green", linewidth=1)+
geom_point(aes(x=dias, y=muestra1), color="dodgerblue3", linewidth=3)+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
muestra_seq <- pol_muestra1(dias_seq)
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=dias_seq, y=muestra_seq), color="green")+
geom_point(aes(x=dias, y=muestra1), color="dodgerblue3")+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
dias <- c(0, 6, 10, 13, 17, 20, 28)
dias_seq <- seq(from=0, to=28, by=0.01)
muestra1 <- c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74)
pol_muestra1 <- as.function(poly.calc(dias, muestra1))
muestra_seq <- pol_muestra1(dias_seq)
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=dias_seq, y=muestra_seq), color="green", linewidth=1)+
geom_point(aes(x=dias, y=muestra1), color="dodgerblue3")+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
poly.calc(dias, muestra1)
bsx <- data.frame(spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
poly.calc(dias, muestra1)
bsx <- data.frame(b-spline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
poly.calc(dias, muestra1)
bsx <- data.frame(bspline(x=pcwstd$zscore , knots=1:7/8, degree = 3))
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
poly.calc(dias, muestra1)
bsx <- data.frame(bs(x=pcwstd$zscore , knots=1:7/8, degree = 3))
bsx
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
poly.calc(dias, muestra1)
bsx <- data.frame(bs(x=pcwstd$zscore , knots=1:7/8))
bsx
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
poly.calc(dias, muestra1)
bsx <- data.frame(bs(x=pcwstd$zscore))
bsx
plot(bsx)
bsx
X <- cbind(1, generate_design_matrix(degree = 3, knot_vector = c(2), x = x))
generate_design_matrix <- function(x, knot_vector, degree){
return(cbind(outer(x,1:degree,"^"),outer(x,knot_vector,">")*outer(x,knot_vector,"-")^degree))
}
design_matrix2 <- generate_design_matrix(degree = 1, knot_vector = c(1,2.5,4, 5.7), x = x)
x <- seq(from = 0, to = 6, by = .025)
y <- sin(2*x) + x -.1*x^2 + 2 + rnorm(length(x), sd = .3)
generate_design_matrix <- function(x, knot_vector, degree){
return(cbind(outer(x,1:degree,"^"),outer(x,knot_vector,">")*outer(x,knot_vector,"-")^degree))
}
design_matrix2 <- generate_design_matrix(degree = 1, knot_vector = c(1,2.5,4, 5.7), x = x)
mod_ls2 <- lm(y~design_matrix2)
design_matrix3 <- generate_design_matrix(degree = 1, knot_vector = seq(from = 0.1, to = 5.9, by = .2), x = x)
mod_ls3 <- lm(y~design_matrix3)
yhatbad <- predict(mod_ls3)
ggplot() +
geom_point(aes(x = x, y = y), color = "black", alpha = .5) +
geom_line(aes(x = x, y = predict(mod_ls2)), color = "red") +
geom_line(aes(x = x, y = yhatbad), color = "blue") +
labs(title = "Piecewise linear spline - Good number vs. too many knots...")
mod_ls2
design_matrix2
X <- cbind(1, generate_design_matrix(degree = 3, knot_vector = c(2), x = x))
betas <- solve(t(X) %*% X) %*% t(X) %*% y
yhat <- X %*% betas
ggplot() +
geom_point(aes(x = x, y = y), color = "black", alpha = .3) +
geom_line(aes(x = x, y = yhat), color = "black", alpha = 1) +
geom_vline(aes(xintercept = 2), color = "black", linetype = "dotdash") +
labs(title = "Cubic spline",
subtitle = "1 knot at x=2, no penalization, underfitting")
# a)Derivar el polinomio interpolante para obtener la ecuación que describe su pendiente y graficarla
#Solicitamos a R que nos muestre el polinomio que describe el comportamiento de la muestra 2
poly.calc(dias, muestra1)
deri_pol1 <- function(x){-42.64348+2*16.14272*x-3*2.094639*x^2+4*0.1269024*x^3-5*0.003671679*x^4+6*4.094576e-05*x^5}
x1 <- seq(0,28,0.01)
y1 <- deri_pol1(dias_seq)
graf_muestra_1 <- ggplot()+
#Ejes
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Pendiente
geom_line(aes(x1, y1), color="dodgerblue3", size=1)+
labs(x="dias", y="Peso Muestra", title="Pendiente de la muestra 1")+
theme_bw()
ggplotly(graf_muestra_1)
y1
pcwstd
dz<-data.frame(data[,c("D","A","zscore","subclass")])
pcwstd<-data.frame(dz)
pcwstd
pcwstd$subclass
quintil <- pcwstd$subclass
quintil_seq <- seq(from=0, to=5, by=0.01)
muestra1 <- pcwstd$zscore
pol_muestra1 <- as.function(poly.calc(quintil, muestra1))
muestra_seq <- pol_muestra1(quintil_seq)
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=quintil_seq, y=muestra_seq), color="green", linewidth=1)+
geom_point(aes(x=quintil, y=muestra1), color="dodgerblue3")+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
poly.calc(quintil, muestra1)
quintil_seq
muestra1
duplicated(muestra1)
quintil <- 5
quintil_seq <- seq(from=0, to=5, by=0.01)
quintil <- 5
quintil_seq <- seq(from=0, to=5, by=0.01)
muestra1 <- pcwstd$zscore
pol_muestra1 <- as.function(poly.calc(quintil, muestra1))
quintil <- 5
quintil_seq <- seq(from=0, to=5, by=0.01)
muestra1 <- pcwstd$zscore
pol_muestra1 <- as.function(poly.calc(quintil, muestra1))
quintil <- 1
quintil_seq <- seq(from=0, to=1, by=0.01)
quintil_seq
muestra1 <- dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")
quintil <- 1
quintil_seq <- seq(from=0, to=1, by=0.01)
muestra1 <- dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")
pol_muestra1 <- as.function(poly.calc(quintil, muestra1))
dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")
quintil <- 1
quintil_seq <- seq(from=0, to=1, by=0.01)
muestra1 <- as.numeric(unlist(dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")))
pol_muestra1 <- as.function(poly.calc(quintil, muestra1))
table(muestra1)
as.numeric(unlist(dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")))
muestra1
plot(muestra1)
# La funcion which() devuelve la posición o indice de la condicion satisfecha.
h<-as.numeric(unlist(dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")))
# local maxima I obtain local maxima by utilizing the diff function.
diff(sign(diff(h)))==-2
which(diff(sign(diff(h)))==-2)+1
h[c(1, which(diff(sign(diff(h)))==-2)+1, length(h))]
lmax <- h[c(1, which(diff(sign(diff(h)))==-2)+1, length(h))]
length(lmax)
lmax
lmax
h
length(lmax)
length(h)
l
lmax
0,lmax,1
c(0)
d<-c(0)
d
d<-lmax
d
d<-append("0",lmax,"1")
d<-append(list(0),lmax,list(1))
d<-c(primerco,lmax,ultimo)
d<-c(primero,lmax,ultimo)
primero <- 0
ultimo <- 1
d<-c(primero,lmax,ultimo)
d
quintil <- d
quintil_seq <- seq(from=0, to=1, by=0.1)
as.numeric(unlist(dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")))
plot(muestra1)
pol_muestra1 <- as.function(poly.calc(quintil, muestra1))
length(lmax)
length(h)
length(d)
length(muestra1)
spl <- spline(1:length(lmax), lmax)
length(spl$x)
length(lmax)
plot(spl)
plot(spl)
pol_muestra1 <- as.function(poly.calc(spl$x, spl$y))
pol_muestra1
quintil_seq <- seq(from=0, to=1, by=0.1)
pol_muestra <- as.function(poly.calc(spl$x, spl$y))
quintil_seq <- seq(from=0, to=1, by=0.1)
pol_muestra <- as.function(poly.calc(spl$x, spl$y))
muestra_seq <- pol_muestra(quintil_seq)
muestra_seq
quintil_seq <- seq(from=0, to=1, by=0.1)
pol_muestra <- as.function(poly.calc(spl$x, spl$y))
pol_muestra
muestra_seq <- pol_muestra(quintil_seq)
pol_muestra
muestra_seq
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=quintil_seq, y=muestra_seq), color="green", linewidth=1)+
geom_point(aes(x=spl$x, y=spl$y), color="dodgerblue3")+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
plot(spl)
quintil_seq <- seq(from=0.5, to=.7, by=0.1)
pol_muestra <- as.function(poly.calc(spl$x, spl$y))
muestra_seq <- pol_muestra(quintil_seq)
pol_muestra
muestra_seq
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=quintil_seq, y=muestra_seq), color="green", linewidth=1)+
geom_point(aes(x=spl$x, y=spl$y), color="dodgerblue3")+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
# La funcion which() devuelve la posición o indice de la condicion satisfecha.
h<-as.numeric(unlist(dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")))
# local maxima I obtain local maxima by utilizing the diff function.
diff(sign(diff(h)))==-2
which(diff(sign(diff(h)))==-2)+1
h[c(1, which(diff(sign(diff(h)))==-2)+1, length(h))]
lmax <- h[c(1, which(diff(sign(diff(h)))==-2)+1, length(h))]
lmax
# spline calculation
spl <- spline(1:length(lmax), lmax) # calcula de manera cuadratica
length(spl$x)
plot(spl)
quintil_seq <- seq(from=0.5, to=.7, by=0.1)
pol_muestra <- as.function(poly.calc(spl$x, spl$y))
muestra_seq <- pol_muestra(quintil_seq)
pol_muestra
muestra_seq
graf_2 <- ggplot()+
geom_vline(xintercept = 0, linetype="dashed")+
geom_hline(yintercept = 0, linetype="dashed")+
#Muestra 1
geom_line(aes(x=quintil_seq, y=muestra_seq), color="green", linewidth=1)+
geom_point(aes(x=spl$x, y=spl$y), color="dodgerblue3")+
labs(x="dias", y="Peso Muestra", title="Interpolación  2, inciso a)")+
theme_bw()
ggplotly(graf_2)
length(lmax)
length(d)
length(muestra1)
primero <- 0
ultimo <- 1
d<-c(primero,lmax,ultimo)
length(d)
length(muestra1)
quintil <- d
quintil_seq <- seq(from=0, to=1, by=0.1)
as.numeric(unlist(dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")))
muestra1 <- as.numeric(unlist(dplyr::select(dplyr::filter(pcwstd, subclass == 1,),"zscore")))
pol_muestra1 <- as.function(poly.calc(quintil, muestra1))
pol_muestra <- as.function(poly.calc(spl$x, spl$y))
pol_muestra
pol_muestra
bs(1:length(lmax), lmax, degree=1)
lmax
bs(1:legnth(h), h, degree=1, knots=5)
bs(1:length(h), h, degree=1, knots=5)
spli<-data.frame(bs(1:length(h), h, degree=1, knots=5, intercept = TRUE))
spli
spli<-data.frame(bs(x=h, degree=1, knots=5, intercept = TRUE))
spli
spli<-data.frame(bs(x=h, degree=1, knots=1:5, intercept = TRUE))
spli
splot(spli)
splot(spli$X1)
spli<-data.frame(bs(x=h, degree=1, knots=1:5, intercept = TRUE))
plot(spli$X1)
plot(spli)
